import 'dart:convert';
import 'package:flutter/material.dart';

class NotificationModel {
  final int id;
  final String title;
  final String content;
  final DateTime time;
  final bool isRead;
  final String notificationType;
  final String? icon;
  final Map<String, dynamic> rawData;
  Color? color;

  NotificationModel({
    required this.id,
    required this.title,
    required this.content,
    required this.time,
    this.isRead = false,
    this.notificationType = 'unknown',
    this.icon,
    this.color,
    required this.rawData,
  });

  factory NotificationModel.fromJson(Map<String, dynamic> json) {
    // Tr√≠ch xu·∫•t d·ªØ li·ªáu th√¥ng b√°o v·ªõi x·ª≠ l√Ω an to√†n
    Map<String, dynamic> data = {};
    if (json['data'] is Map) {
      data = Map<String, dynamic>.from(json['data']);
    } else if (json['data'] is String) {
      try {
        data = jsonDecode(json['data']);
      } catch (e) {
        data = {'message': json['data']};
      }
    }

    // X√°c ƒë·ªãnh lo·∫°i th√¥ng b√°o
    String notificationType = data['notification_type'] ?? 'unknown';

    // X√°c ƒë·ªãnh ti√™u ƒë·ªÅ d·ª±a tr√™n lo·∫°i th√¥ng b√°o
    String title = data['title'] ?? 'Th√¥ng b√°o';
    if (notificationType == 'new_event') {
      title = data['event_name'] ?? 'S·ª± ki·ªán m·ªõi';
    } else if (notificationType == 'new_blog') {
      title = data['blog_title'] ?? 'B√†i vi·∫øt m·ªõi';
    }

    // X√°c ƒë·ªãnh n·ªôi dung
    String content = data['message'] ?? '';
    if (content.isEmpty) {
      if (notificationType == 'new_event') {
        content =
            'S·ª± ki·ªán m·ªõi: "${data['event_name'] ?? ''}" s·∫Ω di·ªÖn ra v√†o ${data['start_date'] ?? ''} t·∫°i ${data['location'] ?? ''}';
      } else if (notificationType == 'new_blog') {
        content =
            'B√†i vi·∫øt m·ªõi: "${data['blog_title'] ?? ''}" b·ªüi ${data['author_name'] ?? ''}';
      }
    }

    // X√°c ƒë·ªãnh icon d·ª±a tr√™n lo·∫°i th√¥ng b√°o
    String icon = 'üîî';
    if (notificationType == 'new_event') {
      icon = 'üìÖ';
    } else if (notificationType == 'new_blog') {
      icon = 'üìù';
    }

    // T·∫°o ID an to√†n
    int id = 0;
    try {
      id = json['id'] is int
          ? json['id']
          : int.tryParse(json['id'].toString()) ?? 0;
    } catch (e) {
      id = 0;
    }

    // X·ª≠ l√Ω datetime an to√†n
    DateTime time = DateTime.now();
    try {
      if (json['read_at'] != null) {
        time = DateTime.tryParse(json['read_at'].toString()) ?? DateTime.now();
      } else if (json['created_at'] != null) {
        time =
            DateTime.tryParse(json['created_at'].toString()) ?? DateTime.now();
      }
    } catch (e) {
      time = DateTime.now();
    }

    // X√°c ƒë·ªãnh tr·∫°ng th√°i ƒë√£ ƒë·ªçc
    bool isRead = false;
    try {
      isRead = json['read_at'] != null;
    } catch (e) {
      isRead = false;
    }

    return NotificationModel(
      id: id,
      title: title,
      content: content,
      time: time,
      isRead: isRead,
      notificationType: notificationType,
      icon: icon,
      rawData: {...json, ...data},
    );
  }

  // L·∫•y c√°c th√¥ng tin chi ti·∫øt theo lo·∫°i th√¥ng b√°o
  Map<String, dynamic> getDetailsBasedOnType() {
    Map<String, dynamic> details = {};

    switch (notificationType) {
      case 'new_event':
        details = {
          'event_id': rawData['event_id'],
          'event_name': rawData['event_name'] ?? title,
          'start_date': rawData['start_date'] ?? '',
          'end_date': rawData['end_date'] ?? '',
          'location': rawData['location'] ?? '',
          'description': rawData['description'] ?? content,
        };
        break;

      case 'new_blog':
        details = {
          'blog_id': rawData['blog_id'],
          'blog_title': rawData['blog_title'] ?? title,
          'author_name': rawData['author_name'] ?? '',
          'publish_date': rawData['publish_date'] ?? '',
          'content': rawData['blog_content'] ?? content,
        };
        break;

      case 'promotion':
        details = {
          'promotion_id': rawData['promotion_id'],
          'promotion_title': rawData['promotion_title'] ?? title,
          'valid_until': rawData['valid_until'] ?? '',
          'description': rawData['description'] ?? content,
        };
        break;

      default:
        details = {
          'title': title,
          'content': content,
        };
    }

    return details;
  }

  // Ki·ªÉm tra xem c√≥ ID ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng hay kh√¥ng
  bool hasNavigationId() {
    switch (notificationType) {
      case 'new_event':
        return rawData['event_id'] != null;
      case 'new_blog':
        return rawData['blog_id'] != null;
      default:
        return false;
    }
  }

  // L·∫•y ID c·ªßa ƒë·ªëi t∆∞·ª£ng li√™n quan (event_id, blog_id, v.v.)
  int? getTargetId() {
    switch (notificationType) {
      case 'new_event':
        return rawData['event_id'] is int
            ? rawData['event_id']
            : int.tryParse(rawData['event_id']?.toString() ?? '');
      case 'new_blog':
        return rawData['blog_id'] is int
            ? rawData['blog_id']
            : int.tryParse(rawData['blog_id']?.toString() ?? '');
      default:
        return null;
    }
  }
}

// Sample data for notifications - keeping for testing purposes
List<NotificationModel> dummyNotifications = [
  NotificationModel(
    id: 1,
    title: "Khuy·∫øn m√£i ƒë·∫∑c bi·ªát",
    content:
        "Ch√∫ng t√¥i c√≥ ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i ƒë·∫∑c bi·ªát d√†nh cho t·∫•t c·∫£ kh√°ch h√†ng trong th√°ng n√†y.",
    time: DateTime.now().subtract(const Duration(hours: 2)),
    notificationType: "promotion",
    rawData: {
      'promotion_id': 123,
      'valid_until': '30/04/2024',
      'description': 'Gi·∫£m 50% cho t·∫•t c·∫£ s·ª± ki·ªán trong th√°ng 4/2024'
    },
  ),
  NotificationModel(
    id: 2,
    title: "C·∫≠p nh·∫≠t h·ªá th·ªëng",
    content: "H·ªá th·ªëng s·∫Ω ƒë∆∞·ª£c n√¢ng c·∫•p v√†o ng√†y mai t·ª´ 22:00 ƒë·∫øn 23:00.",
    time: DateTime.now().subtract(const Duration(days: 1)),
    notificationType: "system",
    rawData: {
      'message': 'H·ªá th·ªëng s·∫Ω ƒë∆∞·ª£c n√¢ng c·∫•p v√†o ng√†y mai t·ª´ 22:00 ƒë·∫øn 23:00.'
    },
  ),
  NotificationModel(
    id: 3,
    title: "S·ª± ki·ªán m·ªõi",
    content:
        "H·ªôi th·∫£o k·ªπ nƒÉng m·ªÅm s·∫Ω di·ªÖn ra v√†o ng√†y 25/03/2024 t·∫°i H·ªôi tr∆∞·ªùng A1.",
    time: DateTime.now().subtract(const Duration(days: 3)),
    notificationType: "new_event",
    rawData: {
      'event_id': 456,
      'event_name': 'H·ªôi th·∫£o k·ªπ nƒÉng m·ªÅm',
      'start_date': '25/03/2024',
      'location': 'H·ªôi tr∆∞·ªùng A1',
      'description':
          'H·ªôi th·∫£o k·ªπ nƒÉng m·ªÅm gi√∫p b·∫°n ph√°t tri·ªÉn k·ªπ nƒÉng giao ti·∫øp v√† l√†m vi·ªác nh√≥m.'
    },
  ),
  NotificationModel(
    id: 4,
    title: "B√†i vi·∫øt m·ªõi",
    content:
        "B√†i vi·∫øt 'K·ªπ nƒÉng giao ti·∫øp hi·ªáu qu·∫£' ƒë√£ ƒë∆∞·ª£c ƒëƒÉng b·ªüi Nguy·ªÖn VƒÉn A.",
    time: DateTime.now().subtract(const Duration(days: 7)),
    notificationType: "new_blog",
    rawData: {
      'blog_id': 789,
      'blog_title': 'K·ªπ nƒÉng giao ti·∫øp hi·ªáu qu·∫£',
      'author_name': 'Nguy·ªÖn VƒÉn A',
      'blog_content':
          'B√†i vi·∫øt chi ti·∫øt v·ªÅ c√°c k·ªπ nƒÉng giao ti·∫øp hi·ªáu qu·∫£ trong m√¥i tr∆∞·ªùng l√†m vi·ªác.'
    },
  ),
];
